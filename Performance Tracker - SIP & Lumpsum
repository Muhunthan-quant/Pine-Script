// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Future_Billi0naire_

//@version=5
indicator("Performance Tracker - SIP & Lumpsum", overlay = true)

// Variables to track the investment
var float totalInvested = 0.0
var float sharesBought = 0.0
var int buyCount = 0
var float initialTime = na
var int lastMonth = na
var label myLabel1 = na
var label myLabel2 = na

// Input
which_camp = input.string("SIP", title="Select SIP or Lumpsum", options=["Lumpsum", "SIP"])
var float monthlySIP = input(1000, "Monthly SIP amount")
var float lumpsumAmount = input(10000, "Lumpsum amount")
var int startDate = input.time(timestamp("2023-01-02 00:00"), "SIP / Lumpsum Start Date")
var int endDate = input.time(timestamp("2023-12-29 00:00"), "SIP End Date")
var float numberOfShares = 0

// Function to check if today is the first trading day of the month and within the date range
isFirstTradingDayOfMonth() =>
    var bool firstDay = false
    if (na(lastMonth) or lastMonth != month(time))
        firstDay := true
    else
        firstDay := false
    firstDay


if which_camp == "SIP"
    numberOfShares := monthlySIP / close
else
    numberOfShares := lumpsumAmount / close

// Update the total invested amount and set the initial investment time if within the date range
if (isFirstTradingDayOfMonth() and time >= startDate and time <= endDate and which_camp == "SIP") 
    lastMonth := month(time)
    sharesBought := sharesBought + numberOfShares
    totalInvested := totalInvested + close * numberOfShares
    buyCount := buyCount + 1
    if (buyCount == 1)
        initialTime := time

if(isFirstTradingDayOfMonth() and time >= startDate and which_camp == "Lumpsum" and buyCount == 0) 
    lastMonth := month(time)
    sharesBought := sharesBought + numberOfShares
    totalInvested := totalInvested + close * numberOfShares
    buyCount := buyCount + 1
    if (buyCount == 1)
        initialTime := time

// Calculate the current value of the investment
currentValue = math.round(close * sharesBought * 100) / 100
monthsInvested = buyCount
yearsInvested = monthsInvested / 12

// Calculate CAGR
days = (time - initialTime) / (1000 * 60 * 60 * 24)
years = days / 365.25
cagr = na(currentValue) or na(totalInvested) or totalInvested == 0 ? na : (math.pow(currentValue / totalInvested, 1 / years) - 1) * 100
absoluteReturn = ((currentValue - totalInvested) / totalInvested) * 100

// Function to get month abbreviation
monthName(m) => m == 1 ? "Jan" : m == 2 ? "Feb" : m == 3 ? "Mar" : m == 4 ? "Apr" : m == 5 ? "May" : m == 6 ? "Jun" : m == 7 ? "Jul" : m == 8 ? "Aug" : m == 9 ? "Sep" : m == 10 ? "Oct" : m == 11 ? "Nov" : "Dec"


// Format the start and end dates
startDateString = str.tostring(dayofmonth(startDate)) + " " + monthName(month(startDate)) + " " + str.tostring(year(startDate))
endDateString = str.tostring(dayofmonth(endDate)) + " " + monthName(month(endDate)) + " " + str.tostring(year(endDate))

// Create a label showing CAGR, shares bought, and total invested
if (bar_index == last_bar_index and which_camp == "SIP")
    myLabel1 := label.new(x = bar_index + 15, y = high, text = "SIP INFO" + "\n\nTotal Investment: Rs." + str.tostring(totalInvested, "#") + "\nCurrent Value : Rs." + str.tostring(currentValue, "#") + "\nCAGR: " + str.tostring(cagr, format.percent) + "\nAbsolute return: " + str.tostring(absoluteReturn, format.percent) + "\n\nShares Bought: " + str.tostring(sharesBought, "#") + "\nMonths Invested : " + str.tostring(monthsInvested) + "\nYears Invested : " + str.tostring(yearsInvested, "#.#"), style = label.style_label_down, color = color.blue, textcolor = color.white, size = size.small)
    label.delete(myLabel1[1])
    myLabel2 := label.new(x = bar_index + 15, y = high, text = "Variable INFO" + "\n\nMonthly SIP : Rs." + str.tostring(monthlySIP) + "\nSIP Start Date : " + startDateString + "\nSIP End Date : " + endDateString, style = label.style_label_up, color = color.purple, textcolor = color.white, size = size.small)
    label.delete(myLabel2[1])


if (bar_index == last_bar_index and which_camp == "Lumpsum")
    myLabel1 := label.new(x = bar_index + 15, y = high, text = "Lumpsum INFO" + "\n\nTotal Investment: Rs." + str.tostring(totalInvested, "#") + "\nCurrent Value : Rs." + str.tostring(currentValue, "#") + "\nCAGR: " + str.tostring(cagr, format.percent) + "\nAbsolute return: " + str.tostring(absoluteReturn, format.percent) + "\n\nShares Bought: " + str.tostring(sharesBought, "#"), style = label.style_label_down, color = color.blue, textcolor = color.white, size = size.small)
    label.delete(myLabel1[1])
    myLabel2 := label.new(x = bar_index + 15, y = high, text = "Variable INFO" + "\n\nLumpsum Amount : Rs." + str.tostring(lumpsumAmount) + "\nLumpsum Date : " + startDateString, style = label.style_label_up, color = color.purple, textcolor = color.white, size = size.small)
    label.delete(myLabel2[1])


